import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { FC, useMemo } from 'react';
import { Base, Column, LayoutProgressBar, Text } from '../../common';

interface LoadingViewProps
{
    isError: boolean;
    message: string;
    percent: number;
}

export const LoadingView: FC<LoadingViewProps> = props =>
{
    const { isError = false, message = '', percent = 0 } = props;

    const loadingAdvices = [ "Texto por definir 1", "Texto por definir 2", "Texto por definir 3"]
    
    const LoadingAdvice = () => {
        return (
            <div className='advice-loading' style={{whiteSpace: "pre-line"}}>
                <FontAwesomeIcon icon="info-circle" /> {loadingAdvices[Math.floor(Math.random() * loadingAdvices.length) + 0]}
            </div>
        )
    }

    const LoadingAdviceCached = useMemo(() => <LoadingAdvice />, [])
    
    return (
        <Column fullHeight position="relative" className="nitro-loading">
            <Base fullHeight className="container h-100">
                <Column fullHeight alignItems="center" justifyContent="end">
                    <div className="connecting-duck">
                        <img src="https://i.imgur.com/ufTfrqA.png" />
                    </div>
                    <Column size={ 7 } className="text-center" style={{marginBottom: "60px"}}>
                        {LoadingAdviceCached}
                        { isError && (message && message.length) ?
                            <Base className="fs-4 text-shadow">{ message }</Base>
                            :
                            <>
                                <LayoutProgressBar progress={ percent } className="mt-2 large" />
                                <Text fontSize={ 5 } variant="white" className="text-shadow">Cargando, espera por favor. ({ percent.toFixed() }%)</Text>
                            </>
                        }
                        
                    </Column>
                </Column>
            </Base>
        </Column>
    );
}
